#include<iostream>
#include<iomanip>
#include "constans.h"
#include"template_functions.h" // содержит определение моих шаблонных функций

// деклорация фунуции Type_Thecking
auto Type_Thecking (char c) -> char;

// деклорация функции для вывода адреса функции Type_Thecking
auto AddressFunctions (char (&func)(char), const char *str) -> void;

// создаём переменную в статической памяти в секции .bss
short statVal;

// создаём переменную в статической памяти в секции .data
short statSize{5};

// создаём массив типа short из пяти элементов в статической памяти
short statArray[]{5, 66, 74, 20, 10};

// деклорация функции вывода адреса переменной, адреса и значения элементов массива созданных в стеке
auto StecFunc () -> void;

// деклорация функции вывода адреса переменной и адреса и значения элементов массива созданных в куче
auto HeapFunc () -> RetConst;

// функция для задания №1
auto Task_1 (int (&r_main)()) -> void {
    std::string s = "Задание 1)";
    std::cout << std::setw(30) << std::right << s << '\n';
    std::cout << "Выведите следующее:\n"
                 "адрес функции main\n"
                 "адрес функции (создайте функцию с любой сигнатурой)\n"
                 "адрес переменной созданной в стэке\n"
                 "aдpecа и значения элементов массива созданного в стэке (выведите в цикле)\n"
                 "адрес переменной в статической памяти в секции .bss\n"
                 "адрес переменной в статической памяти в секции .data\n"
                 "адpecа и значения элементов массива созданного в статической памяти (выведите в цикле)\n"
                 "адрес переменной созданной в куче\n"
                 "aдpecа и значения элементов массива созданного в куче (выведите в цикле)\n" << std::endl;

    // вывод адреса функции main
    std::cout << "Вывод адреса функции main: " << reinterpret_cast<void*>(r_main) << '\n';

    // вызов функции для вывода адреса функции Type_Thecking
    AddressFunctions (Type_Thecking, "Вывод адреса функции  Type_Thecking: ");

    // вызов функции вывода адреса переменной, адреса и значения элементов массива созданных в стеке
    StecFunc ();

    // вызов функции вывода адреса переменной, адреса и значения элементов массива созданных в куче
    HeapFunc ();
}

// функция вывода адреса переменной, адреса и значения элементов массива созданных в стеке
auto StecFunc () -> void {
    // создаём переменную для длины массива и вывода адреса  переменной созданной в стеке
    constexpr short arrSize{5};
    std::cout << "\vВывод адреса переменной arrSize созданной в стэке: " << &arrSize << '\n';
    // создаём массив типа short из пяти элементов в стеке
    short stecArray[arrSize];
    // функция для заполнения массива вихрем Мерсена
    MersWhir (stecArray, arrSize);
    // вызов функции для вывода адреса и значений элементов массива созданного в стеке
    ArrayPrint (stecArray, arrSize, "\vВывод aдpecа и значения элементов массива stecArray"
                                   " созданного в стэке (выводим в цикле)");

    // вывод адреса переменной staVal в статической памяти в секции .bss
    std::cout << "\vВывод адреса переменной statVal"
                 " созданной в статической памяти в секции .bss: " << &statVal << '\n';

    // вывод адреса переменной size в статической памяти в секции .data
    std::cout << "\vвывод адреса переменной statSize"
                 " созданной в статической памяти в секции .data: " << &statSize << '\n';


    // вызов функции для вывода адреса и значений элементов массива созданного в статической памяти
    ArrayPrint (statArray, ::statSize, "\vВывод aдpecа и значения элементов массива statArray"
                                  " созданного в статической памяти (выводим в цикле)");
}


// функция вывода адреса переменной, адреса и значения элементов массива созданных в куче
auto HeapFunc () -> RetConst {
    // запрос на выделение динамической памяти для целочисленного значения
    short *dinamValue = new (std::nothrow) short{10};
    if ( ! dinamValue) { // обрабатываем случай, когда new возвращает null (т.е. память не выделяется)
        // Обработка этого случая
        std::cout << "память не выделенна!!!";
        return ErrMemory;
    }
    else {
        std::cout <<  "\vВывод адреса переменной dinamValue созданной в куче: " << &dinamValue << '\n';
        delete dinamValue; // освобождаем память
        dinamValue = nullptr; // обнуляем указатель
    }

    // запрос на выделение динамической памяти для массива
    short *dinamArray = new (std::nothrow) short[::statSize];
    if ( ! dinamArray) { // обрабатываем случай, когда new возвращает null (т.е. память не выделяется)
        // Обработка этого случая
        std::cout << "память не выделенна!!!";
        return ErrMemory;
    }
    else {
        // функция для заполнения массива вихрем Мерсена
        MersWhir (dinamArray, statSize);
        // вызов функции дли вывода массива
        ArrayPrint (dinamArray, statSize, "\vВывод aдpecа и значения элементов массива dinamArray"
                                     " созданного в куче (выводим в цикле)");
        delete[] dinamArray; // освобождаем память
        dinamArray = nullptr; // обнуляем указатель
    }
    return Ok;
}

// функция вывода адреса функции Type_Thecking
auto AddressFunctions (char (&func)(char c), const char *str) -> void {

    std::cout << str << reinterpret_cast<void*>(func) << '\n';
}

